// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: psdbconnect.v1alpha1.proto

package psdbconnectv1alpha1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1alpha1 "github.com/planetscale/airbyte-source/proto/psdbconnect/v1alpha1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ConnectName is the fully-qualified name of the Connect service.
	ConnectName = "psdbconnect.v1alpha1.Connect"
)

// ConnectClient is a client for the psdbconnect.v1alpha1.Connect service.
type ConnectClient interface {
	Sync(context.Context, *connect_go.Request[v1alpha1.SyncRequest]) (*connect_go.ServerStreamForClient[v1alpha1.SyncResponse], error)
}

// NewConnectClient constructs a client for the psdbconnect.v1alpha1.Connect service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewConnectClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ConnectClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &connectClient{
		sync: connect_go.NewClient[v1alpha1.SyncRequest, v1alpha1.SyncResponse](
			httpClient,
			baseURL+"/psdbconnect.v1alpha1.Connect/Sync",
			opts...,
		),
	}
}

// connectClient implements ConnectClient.
type connectClient struct {
	sync *connect_go.Client[v1alpha1.SyncRequest, v1alpha1.SyncResponse]
}

// Sync calls psdbconnect.v1alpha1.Connect.Sync.
func (c *connectClient) Sync(ctx context.Context, req *connect_go.Request[v1alpha1.SyncRequest]) (*connect_go.ServerStreamForClient[v1alpha1.SyncResponse], error) {
	return c.sync.CallServerStream(ctx, req)
}

// ConnectHandler is an implementation of the psdbconnect.v1alpha1.Connect service.
type ConnectHandler interface {
	Sync(context.Context, *connect_go.Request[v1alpha1.SyncRequest], *connect_go.ServerStream[v1alpha1.SyncResponse]) error
}

// NewConnectHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewConnectHandler(svc ConnectHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/psdbconnect.v1alpha1.Connect/Sync", connect_go.NewServerStreamHandler(
		"/psdbconnect.v1alpha1.Connect/Sync",
		svc.Sync,
		opts...,
	))
	return "/psdbconnect.v1alpha1.Connect/", mux
}

// UnimplementedConnectHandler returns CodeUnimplemented from all methods.
type UnimplementedConnectHandler struct{}

func (UnimplementedConnectHandler) Sync(context.Context, *connect_go.Request[v1alpha1.SyncRequest], *connect_go.ServerStream[v1alpha1.SyncResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("psdbconnect.v1alpha1.Connect.Sync is not implemented"))
}
