// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: psdbconnect.v1alpha1.proto

package psdbconnectv1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConnectClient is the client API for Connect service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConnectClient interface {
	Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (Connect_SyncClient, error)
}

type connectClient struct {
	cc grpc.ClientConnInterface
}

func NewConnectClient(cc grpc.ClientConnInterface) ConnectClient {
	return &connectClient{cc}
}

func (c *connectClient) Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (Connect_SyncClient, error) {
	stream, err := c.cc.NewStream(ctx, &Connect_ServiceDesc.Streams[0], "/psdbconnect.v1alpha1.Connect/Sync", opts...)
	if err != nil {
		return nil, err
	}
	x := &connectSyncClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Connect_SyncClient interface {
	Recv() (*SyncResponse, error)
	grpc.ClientStream
}

type connectSyncClient struct {
	grpc.ClientStream
}

func (x *connectSyncClient) Recv() (*SyncResponse, error) {
	m := new(SyncResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ConnectServer is the server API for Connect service.
// All implementations should embed UnimplementedConnectServer
// for forward compatibility
type ConnectServer interface {
	Sync(*SyncRequest, Connect_SyncServer) error
}

// UnimplementedConnectServer should be embedded to have forward compatible implementations.
type UnimplementedConnectServer struct {
}

func (UnimplementedConnectServer) Sync(*SyncRequest, Connect_SyncServer) error {
	return status.Errorf(codes.Unimplemented, "method Sync not implemented")
}

// UnsafeConnectServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConnectServer will
// result in compilation errors.
type UnsafeConnectServer interface {
	mustEmbedUnimplementedConnectServer()
}

func RegisterConnectServer(s grpc.ServiceRegistrar, srv ConnectServer) {
	s.RegisterService(&Connect_ServiceDesc, srv)
}

func _Connect_Sync_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SyncRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConnectServer).Sync(m, &connectSyncServer{stream})
}

type Connect_SyncServer interface {
	Send(*SyncResponse) error
	grpc.ServerStream
}

type connectSyncServer struct {
	grpc.ServerStream
}

func (x *connectSyncServer) Send(m *SyncResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Connect_ServiceDesc is the grpc.ServiceDesc for Connect service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Connect_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "psdbconnect.v1alpha1.Connect",
	HandlerType: (*ConnectServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Sync",
			Handler:       _Connect_Sync_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "psdbconnect.v1alpha1.proto",
}
